"""
title: Milling machine prognostics program
author: Abdul Halim bin Slamat
std no.: 9664005
cohort: FT/CS119
"""

#import packages
from sys import exit
from scipy.io import loadmat

#read file; extract contents of 'mill' key and unused flat dimension
#original format == dict, read from MATLAB array
#new format == numpy array
try:
    milldat = loadmat('mill.mat')
    milldat = milldat['mill'][0]
except:
    exit('Error: No file detected.')


#exploring data
""" milldat structure

milldat[x][y][z]:
x = item index, len==167
y = field index, len==13
z = sub-array index for y=7:12, len==9000; for y=0:6, len==1

field legend:
0 = case            type of experiment being run; defines DOC, feed & material
1 = run             no. of experiment runs
2 = VB              flank wear, mm (dist from cutting edge to abrasive wear on flank of tool)
3 = time            duration, s
4 = DOC             depth of cut, mm
5 = feed            rate of traversal thru material, mm/min
6 = material        material being cut (1=cast iron, 2=steel)
7 = smcAC           spindle motor current AC, Amp
8 = smcDC           spindle motor current DC, Amp
9 = vib_table       Table vibration, kHz
10 = vib_spindle    Spindle vibration, kHz
11 = AE_table       Acoustic emission at table, kHz
12 = AE_spindle     Acoustic emission at spindle, kHz
"""
#xyz coords for milldat access
x, y, z = 0, 0, 0

#define case
#case = [ [case, DOC, feed, material], ...]
def caselister():
    case = []
    case.append([1, 1.5, 0.5, 1])
    case.append([2, 0.75, 0.5, 1])
    case.append([3, 0.75, 0.25, 1])
    case.append([4, 1.5, 0.25, 1])
    case.append([5, 1.5, 0.5, 2])
    case.append([6, 1.5, 0.25, 2])
    case.append([7, 0.75, 0.25, 2])
    case.append([8, 0.75, 0.5, 2])
    case.append([9, 1.5, 0.5, 1])
    case.append([10, 1.5, 0.25, 1])
    case.append([11, 0.75, 0.25, 1])
    case.append([12, 0.75, 0.5, 1])
    case.append([13, 0.75, 0.25, 2])
    case.append([14, 0.75, 0.5, 2])
    case.append([15, 1.5, 0.5, 2])
    case.append([16, 1.5, 0.5, 2])
    return case

case = caselister()

#select features to use
#   current:    feats_curr = case, vb, time, smcac, smcdc
#   vibration:  feats_vib = case, vb, time, vib_table, vib_spindle
#   acoustic:   feats_ae = case, vb, time,  ae_table, ae_spindle

#for each experiment run, arrange by case and append to feats_curr[]
feats_curr = []
curr = []
for a in range(len(case)):
    for b in range(len(milldat)):
        if milldat[b][0][0] == case[a][0]:
            curr.append(case[a])                    #case
            curr.append(milldat[b][2][0])           #vb
            curr.append(milldat[b][3][0])           #time
            curr.append(milldat[b][7].flatten() )   #smcac
            curr.append(milldat[b][8].flatten() )   #smcdc
            feats_curr.append(curr)
            curr = []   #reset curr

# feats_vib = []

# feats_ae = []


#input features


#output features


#divide data sets into training & testing groups


#visualise data

#train algorithm
#alg used:


#print training result
#print('X-intercept: ', reg.intercept_)
#print('Coefficient: ', reg.coef_)


#Root mean squared error